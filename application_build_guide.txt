### **Comprehensive Prompt Guide for a Photobooth-Style Web Application**  
**Objective**: Create a user-friendly web app that allows users to (1) take 3 timed photos and design a customizable collage card or (2) upload existing photos to create a similar card. Final outputs are downloadable as Instagram Story-sized PNGs.

---

### **1. Core Features Overview**
#### **Feature 1: Photobooth Mode**  
- **Process**: Take 3 photos ‚Üí Customize collage layout ‚Üí Add caption ‚Üí Download/Retake.  
- **Key Components**:  
  - Timer before each photo.  
  - Collage editor with positional controls (top/middle/bottom).  
  - Caption field at the card‚Äôs bottom.  
  - Download as PNG (1080x1920 pixels, Instagram Story size).  

#### **Feature 2: Library Upload Mode**  
- **Process**: Upload 3 photos ‚Üí Customize collage layout ‚Üí Add caption ‚Üí Download/Edit.  
- **Key Components**:  
  - Photo upload from device/library.  
  - Same collage editor and caption tools as Feature 1.  

---

### **2. Step-by-Step User Flow**  
#### **Photobooth Mode**  
1. **Photo Capture**  
   - **Step 1**: User clicks "Start Photobooth."  
   - **Step 2**: Timer (3-5 seconds) starts before each photo.  
     - *UI Prompt*: ‚ÄúGet ready! Photo 1/2/3 in [timer]‚Ä¶‚Äù  
   - **Step 3**: After 3 photos, previews appear in a grid.  
     - *Option*: ‚ÄúRetake All‚Äù or ‚ÄúContinue to Collage.‚Äù  

2. **Collage Customization**  
   - **Step 1**: Drag-and-drop or select positions (top/middle/bottom) for each photo.  
     - *UI Prompt*: ‚ÄúDrag photos to position them. Tap to assign: Top/Middle/Bottom.‚Äù  
   - **Step 2**: Adjust photo size/zoom within their assigned section.  
   - **Step 3**: Click ‚ÄúNext‚Äù to proceed.  

3. **Caption & Finalize**  
   - **Step 1**: Add text at the bottom of the card.  
     - *UI Prompt*: ‚ÄúWrite a caption (max 50 characters).‚Äù  
   - **Step 2**: Preview the card with caption.  
   - **Step 3**: Choose:  
     - **Download**: Saves as ‚Äúcard_username_date.png‚Äù (1080x1920px).  
     - **Retake**: Resets to Photo Capture step.  

---

#### **Library Upload Mode**  
1. **Photo Selection**  
   - **Step 1**: User clicks ‚ÄúUpload Photos.‚Äù  
   - **Step 2**: Select 3 images from device/library.  
     - *Validation*: Ensure images are JPG/PNG, under 5MB.  
   - **Step 3**: Click ‚ÄúCreate Collage‚Äù to proceed.  

2. **Collage Customization & Caption**  
   - Same workflow as **Photobooth Mode**.  

3. **Finalize**  
   - **Download**: Same as above.  
   - **Edit**: Return to collage editor.  

---

### **3. Technical Requirements**  
#### **Frontend**  
- **Camera Access**: Use `getUserMedia` API for photobooth mode.  
- **Image Processing**:  
  - Collage rendering via HTML5 Canvas or CSS Grid.  
  - Client-side resizing/cropping (e.g., with Cropper.js).  
- **Download**: Convert Canvas to PNG using `toDataURL()`.  

#### **Backend (Optional)**  
- **Storage**: Temporarily store images if processing is server-side.  
- **Caching**: Cache user progress locally (e.g., IndexedDB).  

#### **Responsive Design**  
- Optimize for mobile-first use (vertical layout for Instagram Story sizing).  

---

### **4. UI/UX Guidelines**  
- **Visual Clarity**:  
  - Highlight selected photo positions (e.g., borders/animations).  
  - Preview the Instagram Story aspect ratio during editing.  
- **Accessibility**:  
  - Alt text for images.  
  - Keyboard navigation for drag-and-drop.  
- **Error Handling**:  
  - ‚ÄúRetake Photo‚Äù for blurry/unusable images.  
  - ‚ÄúInvalid File‚Äù alerts for non-image uploads.  

---

### **5. Optional Enhancements**  
1. **Templates**: Pre-designed layouts (e.g., grids, polaroid frames).  
2. **Filters/Stickers**: Add overlays or color filters to photos.  
3. **Social Sharing**: Direct upload to Instagram/Stories.  
4. **QR Code**: Generate a shareable link to the card.  

---

### **6. Example Prompts**  
- **Photobooth Start**: ‚ÄúSmile! Photo 1 of 3 in 3‚Ä¶ 2‚Ä¶ 1‚Ä¶ üì∏‚Äù  
- **Collage Editor**: ‚ÄúArrange your memories! Drag photos to top, middle, or bottom.‚Äù  
- **Caption**: ‚ÄúAdd a witty caption to complete your card! üñäÔ∏è‚Äù  
- **Download**: ‚ÄúYour Insta Story is ready! üéâ Download or share now.‚Äù  

======================================================================================
======================================================================================

Tech Stack For the project:

- **Programming Language**: TypeScript
- **Framework**: Next.js (v15.2.0)
- **React**: v18.3.1
- **Styling**: 
  - Tailwind CSS (v3.4.1)
  - tailwindcss-animate for animations
  - Custom color theming with vintage theme colors
- **UI Components**: shadcn/ui (based on components.json)
- **Component Library**: 
  - Lucide React for icons
  - class-variance-authority for component variants
  - clsx and tailwind-merge for class conditionals
- **Build & Development**:
  - ESLint for linting
  - TurboPack (based on dev script)
- **Application Structure**:
  - React Server Components (RSC enabled)
  - App Router architecture (src/app directory)
- **Deployment**: 
  - Vercel
- **Package Manager**: 
  - Both npm (package-lock.json) and Bun (bun.lock) files present

This project follows a modern Next.js architecture with the App Router pattern, uses TypeScript for type safety, and employs shadcn/ui components styled with Tailwind CSS.
